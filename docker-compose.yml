version: '3'

networks:
  backend:

services:
  nginx:
    image: nginx:stable
    container_name: nginx
    ports:
      - "${NGINX_PORT}:80"
      - "443:443"
    volumes:
      - ./projects:/var/www
      - ./nginx/conf.d:/etc/nginx/conf.d
      - ./nginx/logs:/var/log/nginx/
    environment:
      TZ: ${WORKSPACE_TIMEZONE}
    networks:
      backend:
        aliases:
        - label-service-app
        - catalog-service-app
        - cart-service-app
        - company-service-app
        - promotion-apply-service
        - jmart.localhost
        - listing-service-app
        - jysan-payment-srv-app
      
  php-8:
    build:
      context: ./php-workspace/php-8
      dockerfile: Dockerfile
      args:
        DOCKER_PHP_VERSION: '8'
        DOCKER_PHP_ENABLE_XDEBUG: '${DOCKER_PHP_ENABLE_XDEBUG}'
        TZ: ${WORKSPACE_TIMEZONE}
    working_dir: /var/www
    container_name: php-8
    user: "www-data:www-data"
    volumes:
      - ./.ssh:/home/www-data/.ssh
      - ./projects:/var/www
      - ./php-ini/8/php.ini:/usr/local/etc/php/php.ini
    environment:
      COMPOSER_MEMORY_LIMIT: -1
    ports:
      - "${PHP_8_PORT}:9000"
    networks:
      - backend

  php-7.4:
    build:
      context: ./php-workspace/php-7.4
      dockerfile: Dockerfile
      args:
        DOCKER_PHP_VERSION: '7.4'
        DOCKER_PHP_ENABLE_XDEBUG: '${DOCKER_PHP_ENABLE_XDEBUG}'
        TZ: ${WORKSPACE_TIMEZONE}
    user: "www-data:www-data"
    working_dir: /var/www
    container_name: php-7.4
    volumes:
      - ./.ssh:/home/www-data/.ssh
      - ./projects:/var/www
      - ./php-ini/7.4/php.ini:/usr/local/etc/php/php.ini
    ports:
      - "${PHP_7_4_PORT}:9000"
    networks:
      - backend

  redis:
    image: redis:latest
    container_name: redis
    ports:
      - "${REDIS_PORT}:6379"
    volumes:
      - ./redis/data:/var/lib/redis
      - ./redis/conf:/usr/local/etc/redis/redis.conf
    environment:
      TZ: ${WORKSPACE_TIMEZONE}
    networks:
      - backend

  redis-commander:
    container_name: redis-commander
    hostname: redis-commander
    image: rediscommander/redis-commander:latest
    restart: always
    environment:
      - REDIS_HOSTS=local:redis:6379
    ports:
      - "8081:8081"
    networks:
      - backend

  mysql-5.7:
    image: mysql:5.7
    container_name: mysql-5.7
    restart: unless-stopped
    volumes:
      - ./mysql-5.7/data:/var/lib/mysql
      - ./mysql-5.7/conf.d:/etc/mysql/conf.d
      - ./mysql-5.7/logs:/var/log/mysql/
      - ./mysql-5.7/dump:/dump
    ports:
      - "${MYSQL_5_7_PORT}:3306"
    security_opt:
      - seccomp:unconfined
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      TZ: ${WORKSPACE_TIMEZONE}
    networks:
      - backend

  mariadb:
    image: mariadb
    container_name: mariadb
    restart: unless-stopped
    volumes:
      - ./mariadb/data:/var/lib/mysql
      - ./mariadb/conf.d:/etc/mysql/conf.d
      - ./mariadb/logs:/var/log/mysql/
      - ./mariadb/dump:/dump
    ports:
      - "${MARIA_DB_PORT}:3306"
    security_opt:
      - seccomp:unconfined
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      TZ: ${WORKSPACE_TIMEZONE}
    networks:
      - backend

  adminer:
    image: adminer
    restart: unless-stopped
    ports:
      - "8082:8080"
    networks:
      - backend

  postgres:
    image: postgres:12
    container_name: postgres
    volumes:
      - ./postgres/data:/var/lib/postgresql/data
      - ./postgres/dump:/dump
    ports:
      - "${POSTGRES_PORT}:5432"
    environment:
      PGDATA: /var/lib/postgresql/data/pgdata/
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      TZ: ${WORKSPACE_TIMEZONE}
    networks:
        - backend

  elasticsearch:
    container_name: elasticsearch
    image: elasticsearch:7.9.2
    ports:
      - "${ELASTICSEARCH_PORT1}:9200"
      - "${ELASTICSEARCH_PORT2}:9300"
    volumes:
      - './elasticsearch/data:/usr/share/elasticsearch/data'
    environment:
      - discovery.type=single-node
    networks:
      - backend
      
  kibana:
    container_name: kibana
    image: kibana:7.16.2
    ports:
      - "${KIBANA_PORT}:5601"
    volumes:
      - './kibana/config:/usr/share/kibana/config'
      - './kibana/data:/usr/share/kibana/data'
    environment:
      ELASTICSEARCH_HOSTS: ${ELASTICSEARCH_HOST}:${ELASTICSEARCH_PORT1}
    networks:
      - backend


  rabbitmq:
    container_name: rabbitmq
    image: rabbitmq:3.8
    ports:
      - "${RABBiTMQ_PORT}:15672"
    networks:
      - backend